===== ./Footer.vue =====
<template>
  <footer class="relative z-10 bg-white/50 dark:bg-slate-900/50 backdrop-blur-sm border-t border-white/20 dark:border-slate-700/50">
    <div class="max-w-6xl mx-auto px-6 py-12">
      <div class="grid md:grid-cols-4 gap-8">
        <div class="md:col-span-2">
          <h3 class="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent mb-4">
            Revy
          </h3>
          <p class="text-slate-600 dark:text-slate-300 mb-6 leading-relaxed">
            Passionate developer creating beautiful and functional digital experiences. 
            Always learning, always building, always pushing the boundaries of what's possible.
          </p>
          <div class="flex space-x-4">
            <a v-for="social in socialLinks" :key="social.name"
               :href="social.url" 
               target="_blank"
               rel="noopener noreferrer"
               class="p-3 bg-slate-100 dark:bg-slate-800 hover:bg-indigo-100 dark:hover:bg-indigo-900/30 rounded-full transition-all duration-200 hover:-translate-y-1 group">
              <Icon :name="social.icon" 
                    class="text-slate-600 dark:text-slate-300 group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors duration-200" />
            </a>
          </div>
        </div>

        <div>
          <h4 class="text-lg font-semibold text-slate-800 dark:text-slate-200 mb-4">Quick Links</h4>
          <div class="space-y-2">
            <a v-for="link in quickLinks" :key="link.name"
               :href="link.href"
               class="block text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200">
              {{ link.name }}
            </a>
          </div>
        </div>

        <div>
          <h4 class="text-lg font-semibold text-slate-800 dark:text-slate-200 mb-4">Get in Touch</h4>
          <div class="space-y-3">
            <div class="flex items-center space-x-3">
              <Icon name="mdi:email" class="text-slate-500 dark:text-slate-400" />
              <span class="text-slate-600 dark:text-slate-300">hello@revy.my.id</span>
            </div>
            <div class="flex items-center space-x-3">
              <Icon name="mdi:map-marker" class="text-slate-500 dark:text-slate-400" />
              <span class="text-slate-600 dark:text-slate-300">Indonesia</span>
            </div>
            <div class="flex items-center space-x-3">
              <Icon name="mdi:phone" class="text-slate-500 dark:text-slate-400" />
              <span class="text-slate-600 dark:text-slate-300">Available for projects</span>
            </div>
          </div>
        </div>
      </div>

      <div class="mt-12 pt-8 border-t border-slate-200 dark:border-slate-700">
        <div class="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
          <div class="flex items-center space-x-6">
            <p class="text-slate-500 dark:text-slate-400 text-sm">
              Â© {{ currentYear }} Revy. All rights reserved.
            </p>
            <div class="flex space-x-4">
              <a href="#" class="text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-400 text-sm transition-colors duration-200">
                Privacy Policy
              </a>
              <a href="#" class="text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-400 text-sm transition-colors duration-200">
                Terms of Service
              </a>
            </div>
          </div>
          
          <div class="flex items-center space-x-2 text-sm text-slate-500 dark:text-slate-400">
            <span>Built with</span>
            <Icon name="mdi:heart" class="text-red-500 animate-pulse" />
            <span>using Nuxt.js & TailwindCSS</span>
          </div>
        </div>
      </div>
    </div>

    <div class="absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-indigo-500 to-transparent opacity-30"></div>
  </footer>
</template>

<script setup lang="ts">
interface SocialLink {
  name: string
  url: string
  icon: string
}

interface QuickLink {
  name: string
  href: string
}

const currentYear = new Date().getFullYear()

const socialLinks: SocialLink[] = [
  {
    name: 'GitHub',
    url: 'https://github.com/revy',
    icon: 'mdi:github'
  },
  {
    name: 'LinkedIn',
    url: 'https://linkedin.com/in/revy',
    icon: 'mdi:linkedin'
  },
  {
    name: 'Twitter',
    url: 'https://twitter.com/revy',
    icon: 'mdi:twitter'
  },
  {
    name: 'Instagram',
    url: 'https://instagram.com/revy',
    icon: 'mdi:instagram'
  }
]

const quickLinks: QuickLink[] = [
  { name: 'Home', href: '#home' },
  { name: 'About', href: '#about' },
  { name: 'Projects', href: '#projects' },
  { name: 'Blog', href: '#blog' },
  { name: 'Contact', href: '#contact' }
]
</script>



===== ./SpotifyPlayer.vue =====
<template>
  <div class="fixed bottom-6 left-6 z-40">
    <div class="bg-white/90 dark:bg-slate-900/90 backdrop-blur-md rounded-2xl shadow-2xl border border-white/20 dark:border-slate-700/50 overflow-hidden transition-all duration-300"
         :class="isExpanded ? 'w-80' : 'w-16 h-16'">
      
      <div v-if="!isExpanded" 
           @click="toggleExpanded"
           class="w-16 h-16 flex items-center justify-center cursor-pointer hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors duration-200">
        <Icon name="mdi:spotify" class="text-2xl text-green-500" />
      </div>

      <div v-else class="p-4">
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center space-x-2">
            <Icon name="mdi:spotify" class="text-xl text-green-500" />
            <span class="text-sm font-medium text-slate-700 dark:text-slate-300">Now Playing</span>
          </div>
          <button @click="toggleExpanded" 
                  class="p-1 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-full transition-colors duration-200">
            <Icon name="mdi:minus" class="text-slate-500 dark:text-slate-400" />
          </button>
        </div>

        <div v-if="currentTrack" class="space-y-4">
          <div class="flex items-center space-x-3">
            <img :src="currentTrack.albumArt" 
                 :alt="currentTrack.album"
                 class="w-12 h-12 rounded-lg shadow-md">
            <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-slate-800 dark:text-slate-200 truncate">
                {{ currentTrack.name }}
              </p>
              <p class="text-xs text-slate-500 dark:text-slate-400 truncate">
                {{ currentTrack.artist }}
              </p>
            </div>
          </div>

          <div class="space-y-2">
            <div class="flex items-center justify-between text-xs text-slate-500 dark:text-slate-400">
              <span>{{ formatTime(currentTime) }}</span>
              <span>{{ formatTime(duration) }}</span>
            </div>
            <div class="w-full bg-slate-200 dark:bg-slate-700 rounded-full h-1">
              <div class="bg-green-500 h-1 rounded-full transition-all duration-300" 
                   :style="{ width: `${(currentTime / duration) * 100}%` }"></div>
            </div>
          </div>

          <div class="flex items-center justify-center space-x-4">
            <button @click="previousTrack" 
                    class="p-2 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-full transition-colors duration-200">
              <Icon name="mdi:skip-previous" class="text-slate-600 dark:text-slate-300" />
            </button>
            
            <button @click="togglePlayPause" 
                    class="p-3 bg-green-500 hover:bg-green-600 text-white rounded-full transition-colors duration-200">
              <Icon :name="isPlaying ? 'mdi:pause' : 'mdi:play'" class="text-lg" />
            </button>
            
            <button @click="nextTrack" 
                    class="p-2 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-full transition-colors duration-200">
              <Icon name="mdi:skip-next" class="text-slate-600 dark:text-slate-300" />
            </button>
          </div>
        </div>

        <div v-else class="text-center py-4">
          <Icon name="mdi:music-off" class="text-3xl text-slate-300 dark:text-slate-600 mb-2" />
          <p class="text-sm text-slate-500 dark:text-slate-400">No track playing</p>
          <button @click="connectSpotify" 
                  class="mt-3 px-4 py-2 bg-green-500 hover:bg-green-600 text-white text-sm rounded-full transition-colors duration-200">
            Connect Spotify
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
interface Track {
  name: string
  artist: string
  album: string
  albumArt: string
  duration: number
}

const isExpanded = ref(false)
const isPlaying = ref(false)
const currentTime = ref(0)
const duration = ref(0)
const currentTrack = ref<Track | null>(null)

const sampleTracks: Track[] = [
  {
    name: "Blinding Lights",
    artist: "The Weeknd",
    album: "After Hours",
    albumArt: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=300&h=300&fit=crop",
    duration: 200
  },
  {
    name: "Levitating",
    artist: "Dua Lipa",
    album: "Future Nostalgia",
    albumArt: "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?w=300&h=300&fit=crop",
    duration: 183
  },
  {
    name: "Good 4 U",
    artist: "Olivia Rodrigo",
    album: "SOUR",
    albumArt: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=300&h=300&fit=crop",
    duration: 178
  }
]

let playInterval: NodeJS.Timeout | null = null
let currentTrackIndex = 0

const toggleExpanded = () => {
  isExpanded.value = !isExpanded.value
  if (isExpanded.value && !currentTrack.value) {
    loadRandomTrack()
  }
}

const togglePlayPause = () => {
  isPlaying.value = !isPlaying.value
  if (isPlaying.value) {
    startPlayback()
  } else {
    stopPlayback()
  }
}

const previousTrack = () => {
  currentTrackIndex = (currentTrackIndex - 1 + sampleTracks.length) % sampleTracks.length
  loadTrack(sampleTracks[currentTrackIndex])
}

const nextTrack = () => {
  currentTrackIndex = (currentTrackIndex + 1) % sampleTracks.length
  loadTrack(sampleTracks[currentTrackIndex])
}

const loadTrack = (track: Track) => {
  currentTrack.value = track
  duration.value = track.duration
  currentTime.value = Math.floor(Math.random() * track.duration * 0.3)
  if (isPlaying.value) {
    startPlayback()
  }
}

const loadRandomTrack = () => {
  currentTrackIndex = Math.floor(Math.random() * sampleTracks.length)
  loadTrack(sampleTracks[currentTrackIndex])
  isPlaying.value = true
  startPlayback()
}

const startPlayback = () => {
  if (playInterval) clearInterval(playInterval)
  playInterval = setInterval(() => {
    if (currentTime.value >= duration.value) {
      nextTrack()
    } else {
      currentTime.value += 1
    }
  }, 1000)
}

const stopPlayback = () => {
  if (playInterval) {
    clearInterval(playInterval)
    playInterval = null
  }
}

const formatTime = (seconds: number) => {
  const mins = Math.floor(seconds / 60)
  const secs = seconds % 60
  return `${mins}:${secs.toString().padStart(2, '0')}`
}

const connectSpotify = () => {
  alert('Spotify integration would require authentication setup. This is a demo version.')
}

onMounted(() => {
  setTimeout(() => {
    loadRandomTrack()
  }, 2000)
})

onUnmounted(() => {
  stopPlayback()
})
</script>



===== ./UserProfile.vue =====
<template>
  <div class="fixed left-0 top-0 h-full w-80 bg-white/90 dark:bg-slate-900/90 backdrop-blur-md border-r border-white/20 dark:border-slate-700/50 shadow-2xl z-50">
    <div class="flex flex-col h-full">
      <div class="flex items-center justify-between p-4 border-b border-slate-200 dark:border-slate-700">
        <h3 class="text-lg font-semibold text-slate-800 dark:text-slate-200">Profile</h3>
        <button @click="$emit('close')" 
                class="p-2 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-full transition-colors duration-200">
          <Icon name="mdi:close" class="text-slate-500 dark:text-slate-400" />
        </button>
      </div>

      <div class="flex-1 p-6">
        <div v-if="user" class="text-center">
          <div class="relative inline-block mb-6">
            <img :src="user.photoURL || 'https://via.placeholder.com/120'" 
                 :alt="user.displayName || 'User'"
                 class="w-24 h-24 rounded-full border-4 border-white dark:border-slate-700 shadow-lg">
            <div class="absolute -bottom-1 -right-1 w-6 h-6 bg-green-500 rounded-full border-2 border-white dark:border-slate-900"></div>
          </div>
          
          <h4 class="text-xl font-bold text-slate-800 dark:text-slate-200 mb-2">
            {{ user.displayName || 'Anonymous User' }}
          </h4>
          <p class="text-slate-600 dark:text-slate-400 mb-6">{{ user.email }}</p>

          <div class="space-y-4">
            <div class="bg-slate-50 dark:bg-slate-800/50 rounded-xl p-4">
              <div class="flex items-center justify-between">
                <span class="text-slate-600 dark:text-slate-400">Account Status</span>
                <span class="px-3 py-1 bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400 rounded-full text-sm font-medium">
                  Active
                </span>
              </div>
            </div>

            <div class="bg-slate-50 dark:bg-slate-800/50 rounded-xl p-4">
              <div class="flex items-center justify-between">
                <span class="text-slate-600 dark:text-slate-400">Member Since</span>
                <span class="text-slate-800 dark:text-slate-200 font-medium">
                  {{ formatDate(user.metadata?.creationTime) }}
                </span>
              </div>
            </div>

            <div class="bg-slate-50 dark:bg-slate-800/50 rounded-xl p-4">
              <div class="flex items-center justify-between">
                <span class="text-slate-600 dark:text-slate-400">Last Sign In</span>
                <span class="text-slate-800 dark:text-slate-200 font-medium">
                  {{ formatDate(user.metadata?.lastSignInTime) }}
                </span>
              </div>
            </div>
          </div>

          <div class="mt-8 space-y-3">
            <button class="w-full px-4 py-3 bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 rounded-xl hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors duration-200 flex items-center justify-center space-x-2">
              <Icon name="mdi:cog" />
              <span>Settings</span>
            </button>
            
            <button @click="signOut" 
                    class="w-full px-4 py-3 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-xl hover:bg-red-100 dark:hover:bg-red-900/30 transition-colors duration-200 flex items-center justify-center space-x-2">
              <Icon name="mdi:logout" />
              <span>Sign Out</span>
            </button>
          </div>
        </div>

        <div v-else class="text-center py-12">
          <Icon name="mdi:account-circle" class="text-6xl text-slate-300 dark:text-slate-600 mb-6" />
          <h4 class="text-xl font-semibold text-slate-800 dark:text-slate-200 mb-4">
            Welcome to Revy's Portfolio
          </h4>
          <p class="text-slate-600 dark:text-slate-400 mb-8">
            Sign in to unlock personalized features and save your preferences.
          </p>
          <button @click="signIn" 
                  class="w-full px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-xl hover:shadow-lg hover:-translate-y-0.5 transition-all duration-200 flex items-center justify-center space-x-2">
            <Icon name="mdi:login" />
            <span>Sign in Now</span>
          </button>
          
          <div class="mt-6 text-xs text-slate-500 dark:text-slate-400">
            <p>Secure authentication powered by Firebase</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
interface User {
  uid: string
  displayName: string | null
  email: string | null
  photoURL: string | null
  metadata?: {
    creationTime?: string
    lastSignInTime?: string
  }
}

const emit = defineEmits(['close'])

const user = ref<User | null>(null)

const signIn = () => {
  const authUrl = process.env.AUTH_URL || 'https://auth.revy.my.id'
  window.location.href = authUrl
}

const signOut = () => {
  user.value = null
  localStorage.removeItem('firebase-user')
}

const formatDate = (dateString?: string) => {
  if (!dateString) return 'Unknown'
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })
}

const loadUser = () => {
  const savedUser = localStorage.getItem('firebase-user')
  if (savedUser) {
    try {
      user.value = JSON.parse(savedUser)
    } catch (error) {
      console.error('Error loading user data:', error)
      localStorage.removeItem('firebase-user')
    }
  }
}

onMounted(() => {
  loadUser()
  
  window.addEventListener('storage', (e) => {
    if (e.key === 'firebase-user') {
      loadUser()
    }
  })
})
</script>



===== ./ChatPanel.vue =====
<template>
  <div class="fixed right-0 top-0 h-full w-96 bg-white/90 dark:bg-slate-900/90 backdrop-blur-md border-l border-white/20 dark:border-slate-700/50 shadow-2xl z-50">
    <div class="flex flex-col h-full">
      <div class="flex items-center justify-between p-4 border-b border-slate-200 dark:border-slate-700">
        <div class="flex items-center space-x-3">
          <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
          <h3 class="text-lg font-semibold text-slate-800 dark:text-slate-200">AI Assistant</h3>
        </div>
        <div class="flex items-center space-x-2">
          <button @click="clearChat" 
                  class="p-2 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-full transition-colors duration-200">
            <Icon name="mdi:delete" class="text-slate-500 dark:text-slate-400" />
          </button>
          <button @click="$emit('close')" 
                  class="p-2 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-full transition-colors duration-200">
            <Icon name="mdi:close" class="text-slate-500 dark:text-slate-400" />
          </button>
        </div>
      </div>

      <div ref="messagesContainer" class="flex-1 overflow-y-auto p-4 space-y-4">
        <div v-if="messages.length === 0" class="text-center py-8">
          <Icon name="mdi:robot" class="text-6xl text-slate-300 dark:text-slate-600 mb-4" />
          <p class="text-slate-500 dark:text-slate-400 mb-2">Hi! I'm your AI assistant.</p>
          <p class="text-sm text-slate-400 dark:text-slate-500">Ask me anything about Revy's work or projects!</p>
        </div>

        <div v-for="message in messages" :key="message.id" 
             class="animate-fade-in"
             :class="message.role === 'user' ? 'flex justify-end' : 'flex justify-start'">
          <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-2xl"
               :class="message.role === 'user' 
                 ? 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white' 
                 : 'bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200'">
            <p class="text-sm whitespace-pre-wrap">{{ message.content }}</p>
            <p class="text-xs opacity-70 mt-1">{{ formatTime(message.timestamp) }}</p>
          </div>
        </div>

        <div v-if="isLoading" class="flex justify-start">
          <div class="bg-slate-100 dark:bg-slate-800 rounded-2xl px-4 py-2">
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
              <div class="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
              <div class="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
            </div>
          </div>
        </div>
      </div>

      <div class="p-4 border-t border-slate-200 dark:border-slate-700">
        <div class="flex space-x-2">
          <input v-model="newMessage" 
                 @keyup.enter="sendMessage"
                 :disabled="isLoading"
                 placeholder="Type your message..."
                 class="flex-1 px-4 py-2 rounded-full border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-800 dark:text-slate-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50">
          <button @click="sendMessage" 
                  :disabled="!newMessage.trim() || isLoading"
                  class="p-2 bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-full hover:shadow-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed">
            <Icon name="mdi:send" class="text-lg" />
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

const emit = defineEmits(['close'])

const messages = ref<Message[]>([])
const newMessage = ref('')
const isLoading = ref(false)
const messagesContainer = ref<HTMLElement>()

const systemPrompt = `You are an AI assistant for Revy's portfolio website. You are knowledgeable about:
- Revy's skills in Vue.js, Nuxt.js, TypeScript, Node.js, Python, PostgreSQL, Firebase, and Tailwind CSS
- The projects showcased on the portfolio including e-commerce platform, task management app, and portfolio website
- Modern web development practices and technologies
- Providing helpful advice about web development and programming

Keep responses concise, friendly, and professional. Focus on being helpful while maintaining Revy's professional image.`

const sendMessage = async () => {
  if (!newMessage.value.trim() || isLoading.value) return

  const userMessage: Message = {
    id: Date.now().toString(),
    role: 'user',
    content: newMessage.value,
    timestamp: new Date()
  }

  messages.value.push(userMessage)
  newMessage.value = ''
  isLoading.value = true

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'anthropic/claude-3-haiku',
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages.value.map(msg => ({
            role: msg.role,
            content: msg.content
          }))
        ],
        max_tokens: 500,
        temperature: 0.7
      })
    })

    if (!response.ok) {
      throw new Error('Network response was not ok')
    }

    const data = await response.json()
    const assistantMessage: Message = {
      id: (Date.now() + 1).toString(),
      role: 'assistant',
      content: data.choices[0].message.content,
      timestamp: new Date()
    }

    messages.value.push(assistantMessage)
  } catch (error) {
    const errorMessage: Message = {
      id: (Date.now() + 1).toString(),
      role: 'assistant',
      content: 'Sorry, I encountered an error. Please try again later.',
      timestamp: new Date()
    }
    messages.value.push(errorMessage)
  } finally {
    isLoading.value = false
    scrollToBottom()
    saveMessages()
  }
}

const clearChat = () => {
  messages.value = []
  localStorage.removeItem('chat-messages')
}

const formatTime = (date: Date) => {
  return new Date(date).toLocaleTimeString('en-US', { 
    hour: '2-digit', 
    minute: '2-digit' 
  })
}

const scrollToBottom = () => {
  nextTick(() => {
    if (messagesContainer.value) {
      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight
    }
  })
}

const saveMessages = () => {
  localStorage.setItem('chat-messages', JSON.stringify(messages.value))
}

const loadMessages = () => {
  const saved = localStorage.getItem('chat-messages')
  if (saved) {
    messages.value = JSON.parse(saved).map((msg: any) => ({
      ...msg,
      timestamp: new Date(msg.timestamp)
    }))
  }
}

onMounted(() => {
  loadMessages()
  scrollToBottom()
})

watch(messages, scrollToBottom, { deep: true })
</script>

<style scoped>
@keyframes fade-in {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in {
  animation: fade-in 0.3s ease-out;
}
</style>



===== ./NavBar.vue =====
<template>
  <nav class="fixed top-0 w-full z-50 backdrop-blur-md bg-white/80 dark:bg-slate-900/80 border-b border-white/20 dark:border-slate-700/50 transition-colors duration-500">
    <div class="max-w-7xl mx-auto px-6 py-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-8">
          <a href="#home" class="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
            Revy
          </a>
          <div class="hidden md:flex space-x-6">
            <a v-for="item in navItems" :key="item.href" 
               :href="item.href" 
               class="text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200 font-medium">
              {{ item.name }}
            </a>
          </div>
        </div>

        <div class="flex items-center space-x-4">
          <button @click="toggleTheme" 
                  class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors duration-200">
            <Icon :name="isDark ? 'mdi:weather-sunny' : 'mdi:weather-night'" 
                  class="text-xl text-slate-600 dark:text-slate-300" />
          </button>
          
          <button @click="$emit('toggle-profile')" 
                  class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors duration-200">
            <Icon name="mdi:account-circle" 
                  class="text-xl text-slate-600 dark:text-slate-300" />
          </button>
          
          <button @click="$emit('toggle-chat')" 
                  class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors duration-200 relative">
            <Icon name="mdi:chat" 
                  class="text-xl text-slate-600 dark:text-slate-300" />
            <div v-if="hasUnreadMessages" 
                 class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></div>
          </button>

          <button @click="toggleMobileMenu" 
                  class="md:hidden p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors duration-200">
            <Icon :name="showMobileMenu ? 'mdi:close' : 'mdi:menu'" 
                  class="text-xl text-slate-600 dark:text-slate-300" />
          </button>
        </div>
      </div>

      <Transition name="slide-down">
        <div v-if="showMobileMenu" class="md:hidden mt-4 py-4 border-t border-slate-200 dark:border-slate-700">
          <div class="flex flex-col space-y-3">
            <a v-for="item in navItems" :key="item.href" 
               :href="item.href" 
               @click="showMobileMenu = false"
               class="text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200 font-medium py-2">
              {{ item.name }}
            </a>
          </div>
        </div>
      </Transition>
    </div>
  </nav>
</template>

<script setup lang="ts">
interface NavItem {
  name: string
  href: string
}

const emit = defineEmits(['toggle-chat', 'toggle-profile'])

const showMobileMenu = ref(false)
const isDark = ref(false)
const hasUnreadMessages = ref(false)

const navItems: NavItem[] = [
  { name: 'Home', href: '#home' },
  { name: 'About', href: '#about' },
  { name: 'Projects', href: '#projects' }
]

const toggleTheme = () => {
  isDark.value = !isDark.value
  if (isDark.value) {
    document.documentElement.classList.add('dark')
    localStorage.setItem('theme', 'dark')
  } else {
    document.documentElement.classList.remove('dark')
    localStorage.setItem('theme', 'light')
  }
}

const toggleMobileMenu = () => {
  showMobileMenu.value = !showMobileMenu.value
}

onMounted(() => {
  const savedTheme = localStorage.getItem('theme')
  const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches
  
  isDark.value = savedTheme === 'dark' || (!savedTheme && systemDark)
  
  if (isDark.value) {
    document.documentElement.classList.add('dark')
  }

  const chatMessages = localStorage.getItem('chat-messages')
  if (chatMessages) {
    const messages = JSON.parse(chatMessages)
    hasUnreadMessages.value = messages.some((msg: any) => !msg.read)
  }
})
</script>

<style scoped>
.slide-down-enter-active,
.slide-down-leave-active {
  transition: all 0.3s ease-in-out;
}

.slide-down-enter-from,
.slide-down-leave-to {
  opacity: 0;
  transform: translateY(-10px);
}
</style>



